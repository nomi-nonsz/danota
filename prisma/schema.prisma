datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Position {
  TOP
  BOTTOM
  LEFT
  RIGHT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  hash          String
  image         String?

  accounts    Account[]
  sessions    Session[]
  setting     Setting?
  collections Collection[]
  notes       Note[]
  comments    Comment[]
  staredNotes StaredNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id              String   @id @default(cuid())
  autoSave        Boolean? @default(true)
  toolbarPosition Position
  userId          String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id          String @id @default(uuid())
  name        String
  description String?
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  notes Note[]

  @@index([userId])
}

model Note {
  id           String  @id @default(uuid())
  title        String
  isPublic     Boolean @default(false)
  allowComment Boolean @default(false)
  content      String  @db.Text
  shorter      String? @db.VarChar(384)
  userId       String
  categoryId   String?
  collectionId String?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)

  comments    Comment[]
  staredNotes StaredNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, collectionId])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, noteId])
}

model StaredNote {
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, noteId])
}
